getwd()
.libPaths()
library(DESeq2)
## load packages
library(tidyverse)
library(DESeq2)
## load packages
library(BiocInstaller)
biocLite()
biocLite()
getwd()
setwd("./20180613_rseq_redon/")
q()
## load packages
# x <- c("")
# lapply(x, require, character.only = TRUE)
library(BiocInstaller)
library(tidyverse)
library(DESeq2)
biocLite()
unloadNamespace("DESeq2")
lgetwd()
getwd()
ls()
list.files()
## read in htseq2 files
# path of htseq files /home/atongsa/Documents/projects/20180613_rseq_redon/data_base/htseq
# for loop read in the files into a list and merge them to matrix or dataframe
# read in the files
htseq_filenames_s <- list.files(path="/home/atongsa/Documents/projects/20180613_rseq_redon/data_base/htseq", pattern ="^htseq.*", full.names=FALSE )
htseq_filenames_l <- list.files(path="/home/atongsa/Documents/projects/20180613_rseq_redon/data_base/htseq", pattern ="^htseq.*", full.names=T)
htseq_filenames_l
htseq_filenames_s
str(htseq_filenames_l)
## merge the htseqfiles
ht_list <- lapply(filenames_l, read_tsv, col_names=FALSE)
## merge the htseqfiles
ht_list <- lapply(htseq_filenames_l, read_tsv, col_names=FALSE)
htseq_filenames_l
htseq_filenames_s
names(ht_list) <- htseq_filenames_s
ht_list
## merge the htseqfiles; merge or the tidyverse_inner_join; will done the work
for (i in 1:15)
{
colnames(ht_list[[i]]) = c("genes", names(ht_list[i]))
}
ht_list <- lapply(htseq_filenames_l, read_tsv, col_names=FALSE)
ht_list
names(ht_list) <- htseq_filenames_s
ht_list
ht_list <- sapply(htseq_filenames_l, read_tsv, col_names=FALSE)
ht_list
ht_list[1]
ht_list[2]
str(ht_list)
ht_list <- lapply(htseq_filenames_l, read_tsv, col_names=FALSE)
names(ht_list) <- htseq_filenames_s
## merge the htseqfiles; merge or the tidyverse_inner_join; will done the work
for (i in 1:15)
{
colnames(ht_list[[i]]) = c("genes", names(ht_list[i]))
}
## merge; reduce will one by one excute; inner_join will nerge the data
ht_merge <- Reduce(function(a, b) {inner_join(a, b, by="genes")}, ht_list)
ht_merge
## remove 0, remove last 5, remove the sum < 15
ht_merge_clean <- as.data.frame(ht_merge)
## remove 0, remove last 5, remove the sum < 15
ht_merge_clean <- as.data.frame(ht_merge)
rownames(ht_merge_clean) <- ht_merge_clean$genes
ht_merge_clean <- ht_merge_clean[-1] %>%
head(., -5) %>%
.[apply(.,1, sum) > 15,] %>%
na.omit()
ht_merge_clean
tail(ht_merge_clean)
ht_merge_clean
## lapply(x, require, character.only = TRUE)
source("http://bioconductor.org/biocLite.R")
library("DESeq2")
setwd("./results/")
dir.create("deseq2")
setwd("./deseq2/")
setwd("/home/atongsa/Documents/projects/20180613_rseq_redon")
biocLite()
##  DESeq2
library("DESeq2")
getwd()
##  DESeq2
library("DESeq2")
colnames(ht_merge_clean)
colnames(ht_merge_clean)
## construt the matrix
colData <- data.frame(row.names = colnames(ht_merge_clean),
condition = c(rep("menl_sirt2",3), rep("menl_wt", 1), rep("ma9_rip1",3), rep("ma9_rip3",1), rep("ma9_sirt2", 1), rep("ma9_tnfr",3),
rep("ma9_wt", 3)))
colData$condition <- factor(colData$condition, levels = c("menl_sirt2", "menl_wt", "ma9_rip1", "ma9_rip3", "ma9_sirt2", "ma9_tnfr", "ma9_wt"))
colData$condition
colData
str(colData)
## Create DESeq2Dataset object
dds <- DESeqDataSetFromMatrix(countData = ht_merge_clean, colData = colData, design = ~ condition) # there should use condition directly
dds
dds <- DESeq(dds)
res_rip1_rip3 <- results(dds, contrast = c("condition", "ma9_rip1", "ma9_rip3"))
res_rip1_ma9_wt <- results(dds, contrast = c("condition", "ma9_rip1", "ma9_wt"))
res_rip3_ma9_wt <- results(dds, contrast = c("condition", "ma9_rip3", "ma9_wt"))
res_enl_sirt2_ma9_sirt2 <- results(dds, contrast = c("condition", "menl_sirt2", "ma9_sirt2"))
res_enl_sirt2_enl_wt <- results(dds, contrast = c("condition", "menl_sirt2", "menl_wt"))
res_ma9_sirt2_ma9_wt <- results(dds, contrast = c("condition", "ma9_sirt2", "ma9_wt")) # condition first then control
?subset
## filter  res_dds
filter_fun <- function(res)
{
res <- subset(res, padj<0.05 & abs(log2FoldChange) > 1) %>%
.[order(-(.$log2FoldChange), .$padj),] %>%
na.omit()
}
## filter  res_dds; adj < 0.05 ; abd(log2foldchange) >1; so these genes will be the significant genes;
filter_fun <- function(res)
{
res <- subset(res, padj<0.05 & abs(log2FoldChange) > 1) %>%
.[order(-(.$log2FoldChange), .$padj),] %>%
na.omit()
}
filter_fun()
filter_fun
res_list <- list(res_rip1_rip3, res_rip1_ma9_wt, res_rip3_ma9_wt, res_enl_sirt2_ma9_sirt2, res_ma9_sirt2_ma9_wt, res_enl_sirt2_enl_wt)
res_list <- lapply(res_list, filter_fun)
res_list <- list(res_rip1_rip3, res_rip1_ma9_wt, res_rip3_ma9_wt, res_enl_sirt2_ma9_sirt2, res_ma9_sirt2_ma9_wt, res_enl_sirt2_enl_wt)
res_list <- lapply(res_list, filter_fun)
names(res_list) <- c("res_rip1_rip3", "res_rip1_ma9_wt", "res_rip3_ma9_wt", "res_enl_sirt2_ma9_sirt2", "res_ma9_sirt2_ma9_wt", "res_enl_sirt2_enl_wt")
res_list
getwd()
## write results
setwd("./results/deseq2/")
for (i in 1:6)
{
n_m <- names(res_list)[i]
de <- as.data.frame(res_list[[i]]) %>%
rownames_to_column(.)
write.table(de, file=paste0(n_m, ".tsv"), sep="\t", row.names = F, col.names = T)
}
ls()
n_m
de
seq_along(de)
length(de)
de
de[1]
length(de[1])
length(de[1])
length(de[,1])
for (i in 1:6)
{
n_m <- names(res_list)[i]
de <- as.data.frame(res_list[[i]]) %>%
rownames_to_column(.)
n_m_l <- paste0(n_m, "_", length(de[,1]))
de_up <- subset(de, log2FoldChange > 0)
n_m_l_u <- paste0(n_m, "_", length(de_up[,1]))
de_down <- subset(de, log2FoldChange < 0)
n_m_l_d <- paste0(n_m, "_", length(de_down[,1]))
write.table(de, file=paste0(n_m_l, ".tsv"), sep="\t", row.names = F, col.names = T)
write.table(de_up, file=paste0(n_m_l_u, ".up.tsv"), sep="\t", row.names = F, col.names = T)
write.table(de_down, file=paste0(n_m_l_d, ".down.tsv"), sep="\t", row.names = F, col.names = T)
}
## pheatmap show first 50 genes
library("pheatmap")
## pheatmap show first 50 genes
heat_fun(res_dds)
## pheatmap show first 50 genes
heat_fun <- function(res_dds)
{
library("pheatmap")
select <- order(rowMeans(counts(res_dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(res_dds)[,c("condition")])
pheatmap(assay(res_dds)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
}
heat_fun
heat_fun(res_list[[1]])
counts(res_list[1])
counts(res_rip1_rip3)
counts(res_dds)
counts(dds)
res_enl_sirt2_enl_wt[, 1]
counts(res_enl_sirt2_enl_wt[, 1])
counts(res_enl_sirt2_enl_wt)
counts(res_enl_sirt2_enl_wt[1])
de
colData(res_enl_sirt2_enl_wt)
de
names(de)
## normalization
normalized_counts <- counts(dds, normalized=TRUE)
n_c <- normalized_counts
colnames(normalized_counts)
names_normalized_counts <- gsub("htseq_", "", colnames(normalized_counts))
names_normalized_counts
## normalization
normalized_counts <- counts(dds, normalized=TRUE)
names(normalized_counts) <- gsub("htseq_", "", colnames(normalized_counts))
names(normalized_counts)
## normalization
normalized_counts <- counts(dds, normalized=TRUE)
normalized_counts
names(normalizationFactors())
names(normalized_counts
)
names(normalized_counts)
colnames(normalized_counts)
str(normalized_counts)
colnames(normalized_counts) <- gsub("htseq_", "", colnames(normalized_counts))
colnames(normalized_counts)
## normalization
normalized_counts <- counts(dds, normalized=TRUE) %>%
rownames_to_column(as.data.frame(.))
## normalization
normalized_counts <- counts(dds, normalized=TRUE) %>%
as.data.frame(.) %>%
rownames_to_column(.)
colnames(normalized_counts) <- gsub("htseq_", "", colnames(normalized_counts))
colnames(normalized_counts)
write.table(normalized_counts, file="normalized_counts.txt", sep="\t", quote=F, col.names=T, row.names = F)
getwd()
write.table(normalized_counts, file="normalized_counts.tsv", sep="\t", quote=F, col.names=T, row.names = F)
rld <- rlog(dds, blind=FALSE)
## pheatmap
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition")])
rownames(df) <- colnames(dds)
df <- as.data.frame(colData(dds)[,c("condition")])
colnames(df) <- "samples"
rownames(df) <- colnames(dds)
q()
